package com.example.assignment1bscaffold;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This submission is Vikash Raj Seeram original work and has not been copied or
 * generated by a bot. I have
 * read the rules about academic freedom and understand that an academic
 * violation is not only a blemish
 * on my school record, but has implications for myself, my classmates,
 * Conestoga College and society in
 * general.
 */

public class Assignment1aAssignment {

    // Private constructor to prevent instantiation
    private Assignment1aAssignment() {
    }

    /**
     * This method performs a left rotation on an array of strings by a given number
     * of places.
     *
     * @param elements Array of strings to be rotated
     * @param count    Number of places to rotate the array to the left
     * @return Rotated array of strings
     */
    public static String[] rotateLeftStrings(String[] elements, int count) {
        if (elements == null || elements.length == 0 || count % elements.length == 0) {
            return elements;
        }
        int length = elements.length;
        String[] rotatedArray = new String[length];
        count = count % length;
        for (int i = 0; i < length; i++) {
            int newIdx = (i + length - count) % length;
            rotatedArray[newIdx] = elements[i];
        }
        return rotatedArray;
    }

    /**
     * Method to insert a pagebreak within an array at regular intervals.
     *
     * @param items     Array of strings to modify
     * @param frequency Frequency of inserting the delimiter
     * @return An array with the delimiters inserted
     */
    public static String[] pageBreak(String[] items, int frequency) {
        if (items == null || items.length == 0 || frequency <= 0 || frequency > items.length) {
            return items;
        }
        List<String> updatedItems = new ArrayList<>();
        for (int i = 0; i < items.length; i++) {
            updatedItems.add(items[i]);
            if ((i + 1) % frequency == 0 && i < items.length) {
                updatedItems.add("*page break*");
            }
        }
        return updatedItems.toArray(new String[0]);
    }

    /**
     * Resolves the association between students and their pets.
     *
     * @return Array containing students paired with their pets
     */
    public static String[][] playerPositions() {
        String[] studentNames = { "Bob", "Jane", "Priya", "Lane", "Yien" };
        String[] petAssignments = mapPetsToStudents(studentNames);
        String[][] matchedPairs = new String[studentNames.length][2];
        for (int i = 0; i < studentNames.length; i++) {
            matchedPairs[i][0] = studentNames[i];
            matchedPairs[i][1] = petAssignments[i];
        }
        return matchedPairs;
    }

    /**
     * Helper method to assign pets to students based on a predefined mapping.
     */
    private static String[] mapPetsToStudents(String[] names) {
        Map<String, String> preferences = new HashMap<>();
        preferences.put("Bob", "dog");
        preferences.put("Lane", "bird");
        preferences.put("Priya", "cat");
        preferences.put("Jane", "hamster");
        preferences.put("Yien", "fish");

        String[] pets = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            pets[i] = preferences.get(names[i]);
        }
        return pets;
    }

    /**
     * Calculates the positions for players arranged around a circle.
     *
     * @param diameter Circle diameter
     * @param count    Total players
     * @return List of player positions as coordinates
     */
    public static List<String> aroundTheTable(int diameter, int count) {
        List<String> locations = new ArrayList<>();
        double radius = diameter / 2.0;
        double c = radius + 20;

        for (int i = 0; i < count; i++) {
            // calculate the angle
            double angle = Math.PI / 2 - i * 2 * Math.PI / count;
            // get the x and y position
            int x = (int) (c + radius * Math.cos(angle));
            int y = (int) (c - radius * Math.sin(angle));
            locations.add(String.format("Player %d: (%d, %d)", i + 1, x, y));
        }

        return locations;
    }
}
